// https://community.sonarsource.com/t/error-locking-filebasedconfig-root-config-jgit-config-failed-after-5-retries
buildscript {
  configurations.classpath {
    resolutionStrategy {
      force 'org.eclipse.jgit:org.eclipse.jgit:5.13.0.202109080827-r'
    }
  }
}

plugins {
  id 'com.palantir.git-version' version "${gitVersionVersion}"
  // id 'com.diffplug.spotless' version "${spotlessVersion}"
  id 'java-library'
  id 'eclipse'
  id 'maven-publish'
  id 'org.bytedeco.gradle-javacpp-build' version "${javacppVersion}"
}

apply from: "${rootDir}/gradle/s3.gradle"
// apply from: "${rootDir}/gradle/spotless.gradle"

group = 'io.nanodbc'
version = gitVersion()

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
  mavenCentral()
}

dependencyLocking {
  lockAllConfigurations()
}

dependencies {
  api group: 'org.bytedeco', name: 'javacpp', version: javacppVersion
}

def nanodbcSrcPath = "${projectDir}\\nanodbc"
def cmakeBuildPath = "${buildDir}\\cmake"
def msbuildBuildPath = "${buildDir}\\msbuild"
// def javacppGeneratedPath = "${buildDir}\\generated\\sources\\javacpp"

sourceSets {
  main {
    java {
      // srcDirs += [javacppGeneratedPath]
    }
  }
}

task cmakeNanodbc(type: Exec) {
  inputs.dir nanodbcSrcPath
  outputs.dir cmakeBuildPath

  workingDir cmakeBuildPath
  commandLine 'cmake',
    nanodbcSrcPath,
    '-DNANODBC_DISABLE_ASYNC=ON',
    '-DNANODBC_DISABLE_EXAMPLES=ON',
    '-DNANODBC_DISABLE_INSTALL=ON',
    '-DNANODBC_DISABLE_TESTS=ON',
    '-DNANODBC_ENABLE_UNICODE=ON'
}

task msbuildNanodbc(type: Exec) {
  dependsOn cmakeNanodbc

  inputs.dir nanodbcSrcPath
  inputs.dir cmakeBuildPath
  outputs.dir msbuildBuildPath

  workingDir cmakeBuildPath
  commandLine 'msbuild',
    'nanodbc.vcxproj',
    "/p:OutDir=${msbuildBuildPath}\\",
    '/p:Configuration=Release'
}

tasks.withType(org.bytedeco.gradle.javacpp.BuildTask) {
  includePath = [nanodbcSrcPath]
  linkPath = [msbuildBuildPath]
  // clean = true
  compilerOptions = [
    '/D', 'NANODBC_DISABLE_ASYNC',
    '/D', 'NANODBC_ENABLE_UNICODE',
    '/D', '_CRT_SECURE_NO_WARNINGS'
  ]
}

javacppBuildParser {
  classOrPackageNames = ['io.nanodbc.javacpp.NanodbcConfig']
  // outputDirectory = file(javacppGeneratedPath)
}

tasks.named('javacppBuildCompiler') {
  dependsOn 'msbuildNanodbc'
}

// Add implicit dependency
tasks.named('javacppBuildCommand') {
  dependsOn 'javacppPomProperties'
}

task sourcesJar(type: Jar) {
  duplicatesStrategy = 'exclude'
  classifier = 'sources'
  from sourceSets.main.allSource
}

java {
  withSourcesJar()
}

javacppJar {
  exclude '**/*.exp', '**/*.lib', '**/*.obj'
}

publishing {
  publications {
    library(MavenPublication) {
      from components.java
      artifact javacppJar
    }
  }
}
